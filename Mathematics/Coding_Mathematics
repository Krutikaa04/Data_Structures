1) Count Number of Digits

2) Arithmetic and Geometric Progression 

Arithmetic Progression -->
to find the nth term = a + (n-1)d      ......(d is the common difference between two numbers in the series)
Sum of AP = n/2 (2a + (n-1)d)   ......(using the method --> first term + nth term = a + a +(n - 1)d = 2a + (n - 1)d)
for eg. (5, 8, 11, 14, 17, 20....n) ---> here d = 3, a = 5

Geometric Progression
nth term of a GP = a*r ^(n-1).
Geometric Mean = nth root of the product of n terms in the GP.
Sum of ‘n’ terms of a GP (r < 1) = [a (1 – r^n)] / [1 – r].
Sum of ‘n’ terms of a GP (r > 1) = [a (r^n – 1)] / [r – 1].
Sum of infinite terms of a GP (r < 1) = (a) / (1 – r).

3) Quadratic equations 

ax^2 + bx +c = 0

roots = (-b ± √(b2 - 4ac))/2a

4) Mean and Median

5) Prime Numbers - 

- Naive Method for Prime Number
- Sieve of Eratosthenes algorithm

Using Sieve of Eratosthenes is the most efficient way of generating prime numbers up to a given number N.

Following is the algorithm to find all the prime numbers less than or equal to a given integer n by Eratosthenes' method:
 

1. Create a list of consecutive integers from 2 to n: (2, 3, 4, ..., n).
2. Initially, let p equal 2, the first prime number.
3. Starting from p2, count up in increments of p and mark each of these numbers greater than or equal to p2 itself in the list. These numbers will be p(p+1), p(p+2), p(p+3), etc..
4. Find the first number greater than p in the list that is not marked. If there was no such number, stop. Otherwise, let p now equal this number (which is the next prime), and repeat from step 3.

6) LCM and HCF 
If the question says smallest divisible number then find lcm and if says gcd the hcf.
finding GCD using Euclidean Algorithm:
gcd(a, b)
{
    if (a == 0)
        return b;

    return gcd(b % a, a);
}

    OR
    
 gcd (a, b)
 {
    if(a != 0)
        return gcd(b % a, a);
        else {
        return b;
        }

Time Complexity: O(log(min(a, b)))

Important properties of LCM and HCF:
For two numbers say, 'a' and 'b', LCM x HCF = a x b.
so the formula used will be 
ans = ( ans * i ) / gcd

HCF of co-primes = 1.
For two fractions,
HCF = HCF (Numerators) / LCM (Denominators)
LCM = LCM (Numerators) / HCF (Denominators)

7) Permutation and Combinations Basics
Fcatorial -->

Time complexity --> O(log n)
Space complexity --> O(1)

how to find a factorial -->
eg. 4! = 4 * 3 * 2 * 1 = 24

When the question is to count digits of factorial -->

For best space and time complexity and counting numbers greater than 10^6;
  We can use Kamenetsky’s formula to find our answer! 

  It approximates the number of digits in a factorial by :
  f(x) =    log10(((n/e)^n) * sqrt(2*pi*n))

  Thus, we can pretty easily use the property of logarithms to,
  f(x) = n* log10((n/e)) + log10(2*pi*n)/2 
  
  value of e = 2.71828182845904523536
  
  value of pi = 3.141592654


8) Modular Arithmetic 
If the user input provided would be a number which is large enough to not fit in int data type...modulo is used
if the number is small enough then modular arithmetic can be found out by the formula ( a + b ) % m
if the number is large then it can be found out by the formula ( a % m ) + ( b % m ) % m 
Similarly, (a - b) % m = ( (a % m) - ( b % m) ) % m
(a * b) % m = ( (a % m) * ( b % m) ) % m

in case of division we have to find the modular inverse.
Modular inverse --->
( a * b ^ -1 ) % m 

this can be solved by -->
eg.  4 ^ -1 mod 7
Formula -->  a * x = 1 ( mod m )
let here a be 4 and m be 7
( 4 * x ) mod 7 = 1
therefore x must be 2 
therefore the answer of  4 ^ -1 mod 7 = 2
